aggregate btarray
	addr t;
	ui64 n;
endaggregate

//interface-access file
//btarray readall() 
//override(btarray)

interface stapes
    method none append(btarray);
    methodtype btarray view();
    methodtype none save();
endinterface

aggregate vish impl stapes
	btarray usData;
	btarray map;
	btarray asciiData;
	accessfile dataFile;	
	accessfile confFile;	
endaggregate

build dynarraystk() for vish
	confFile  <- buildaccessfile(config);
	map       <- @confFile.readall();
	addr tempfile;
	dataFile  <-  buildaccessfile(tempfile);
	usData    <-  @dataFile.readall();
	asciiData <-  bit6_bit8(data);
endbuild

// private helper box
box searchbit6(addr data, byte bit8)
    btarray map;
    map<- valueAtWithIndex(data,vish,0).map;
	ui64 i;
	i <- 0;
    byte j;
    j <- 0;
	byte tempVal;
	while(i < map.n)
		tempVal <- valueAtWithIndex(map.t, byte, i);
		if tempVal = bit8
			output <- j;
			i <- data.map.n;
		fi
		i <- i + 1;
        j <- j + 1;
	endwhile
endbox

// red white


// private helper box
box btarray bit6_bit8(addr data, byte tmpstr)
    btarray usData;
    usData <- valueAtWithIndex(data,vish,0).usData;
    btarray map;
    map <- valueAtWithIndex(data,vish,0).map;
	byte tmpstr;  		// storing from Usdata
	output.n <- ( usData.n * 8 / 6); 
	output.t <- freezeIt(output.n,byte);
	byte bit6;
	byte nextbit6;
	byte bit8;
	ui64 i;
	ui64 j;
	ui64 rem;
	i<-0;
	j<-0;
	while(i < data.usData.n)
		rem <- remn(i,3);
		tmpstr <- valueAtWithIndex(usData.t,byte,i);
		if(rem = 0)
			bit6 <- band(tmpstr,252);
			bit6 <- rshift(bit6,2);
			bit8 <- valueAtWithIndex(map.t, byte, bit6);
			valueAtWithIndex(output.t,byte,j) <- bit8;
			j <- j + 1;
			bit6 <- band(tmpstr,3);
			bit6 <- lshift(bit6,4);
		else if(rem = 1)
			nextbit6 <- band(tmpstr,240);
			nextbit6 <- rshift(bit6,2);
			bit6 <- bor(nextbit6,bit6);
			bit8 <- valueAtWithIndex(map.t, byte, bit6);
			valueAtWithIndex(output.t,byte,j) <- bit8;
			j <- j + 1;
			bit6 <- band(tmpstr,16);
			bit6 <- lshift(bit6,2);
		else if(rem = 2)
			nextbit6 <- band(tmpstr,192);
			nextbit6 <- rshift(nextbit6,6);
			bit6 <- bor(nextbit6,bit6);
			bit8 <- valueAtWithIndex(map.t, byte, bit6);
			valueAtWithIndex(output.t,byte,j) <- bit8;
			j <- j + 1;
			bit6 <- band(tmpstr,63);
			bit8 <- valueAtWithIndex(map.t, byte, bit6);
			valueAtWithIndex(output.t, byte,j) <- bit8;
			j <- j + 1;
		fi
		i <- i + 1;
	endwhile	
endmethod


// encodeing process asciidata to usdata
// private helper box
box btarray bit8_bit6(addr data) for vish
    btarray asciidata;
    btarray map;
    asciidata <- valueAtWithIndex(data,vish,0).asciiData;
    map <- valueAtWithIndex(data,vish,0).map;
	byte tmpstr;  		// storing from Usdata
	output.n <- ( asciidata.n * 6 / 8 ); 
	output.t <- freezeIt(output.n,byte);
	byte tmpstr;		// storing from Usdata
	byte bit6;
	byte nextbit8;
	byte bit8;
	ui64 bytecnt;
	ui64 i;
	ui64 j;
	ui64 rem;
	i<-0;
	j<-0;
	while( i < asciidata.n )
		rem <- remn(i,4);
		tmpstr <- valueAtWithIndex( asciidata.t , byte ,i );
		bit6 <- searchbit6(data,tmpstr);	
		if rem = 0
			bit8 <- lshift(bit6,2);
		else if rem = 1
			nextbit8 <- rshift(bit6,4);
			bit8 <- bor(nextbit8,bit8);
			valueAtWithIndex(output.t,byte,j) <- bit8;
			j <- j + 1;
			bit8 <- lshift(bit6,4);
		else if rem =2
			nextbit8 <- rshift(bit6,2);
			bit8 <- bor(nextbit8,bit8);
			valueAtWithIndex(output.t,byte,j) <- bit8;
			j <- j + 1;
			bit8 <- lshift(bit6,6);
		else
			bit8<- bor(bit8,bit6);
			valueAtWithIndex(output.t,byte,j) <- bit8;
			j <- j + 1;	
		fi
		i <- i + 1;
	endwhile	
endmethod


method none view() for vish
    output <- asciiData;
endmethod


method none append(btarray content)
    asciiData;
    btarray tmpData;
    tmpData.n = asciiData.n + content.n;
    tmpData.t = freezeIt(tmpData.n,byte);
    ui64 i;
    i <- 0;
    ui64 j;
    j <- 0;
    while i < asciiData.n
        valueAtWithIndex(tmpData.t,byte,i) <- valueAtWithIndex(asciiData.t,byte,i);
        i <- i + 1;
    endwhile
    while j < content.n 
        valueAtWithIndex(tmpData.t,byte,i) <- valueAtWithIndex(content.t,byte,j);
        j <- j + 1;
        i <- i + 1;
    endwhile
    asciiData <- tmpData;
endmethod


method none save() for vish
    btarray usData;
    usData <- bit8_bit6(data);
    @dataFile.override(usData);
endmethod

	
//  101010 101011 0101

// convert byte to six bits
// create table of our ascii mapping
// search function
