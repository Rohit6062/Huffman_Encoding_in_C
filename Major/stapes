boxtype get(addr ad)

aggregate btarray
	addr t;
	ui64 n;
endaggregate

//interface-access file
//btarray readall() 
//override(btarray)

interface stapes
	btarray view();
	none append(btarray);
	none save();
	
endinterface



aggregate vish impl stapes
	addr startBit;
	ui64 capacity;
	ui64 length;
	btarray usData;
	btarray map;
	btarray asciiData;
endaggregate

build dynarraystk() for vish
	accessfile ct;	
	ct <- buildaccessfile(config);
	map <- @ct.readall();

	addr tempfile;
	accessfile ct1;	
	ct1        <- buildaccessfile(tempfile);
	usData    <- @ct1.readall();
	asciiData <- bit6_bit8(data);
	
endbuild

box searchbit6(addr data, byte bit8)
	ui64 i;
	i <- 0;
	byte tempVal;
	while(i < data.map.n)
		tempVal <- valueAtWithIndex(data.map.t, byte, i);
		if tempVal = bit8
			output <- i;
			i <- data.map.n;
		fi
		i <- i + 1;
	endwhile
endbox

box btarray bit6_bit8(addr data) for vish
	output.n <- ( data.usData.n * 8 / 6); 
	output.t <- freeze(output.n,byte);

	byte tmpstr;  		// storing from Usdata
	byte bit6;
	byte nextbit6;
	byte bit8;
	ui64 i;
	ui64 j;
	ui64 rem;
	i<-0;
	j<-0;
	while(i < data.usData.n)
		rem <- remn(i,3);
		tmpstr <- valueAtWithIndex(data.usData.t,byte,i);
		if(rem = 0)
			bit6 <- band(tmpstr,252);
			bit6 <- rshift(bit6,2);
			bit8 <- valueAtWithIndex(data.map.t, byte, bit6);
			valueAtWithIndex(output.t,byte,j) <- bit8;
			j <- j + 1;
			bit6 <- band(tmpstr,3);
			bit6 <- lshift(bit6,4);
		else if(rem = 1)
			nextbit6 <- band(tmpstr,240);
			nextbit6 <- rshift(bit6,2);
			bit6 <- bor(nextbit6,bit6);
			bit8 <- valueAtWithIndex(data.map.t, byte, bit6);
			valueAtWithIndex(output.t,byte,j) <- bit8;
			j <- j + 1;
			bit6 <- band(tmpstr,16);
			bit6 <- lshift(bit6,2);
		else if(rem = 2)
			nextbit6 <- band(tmpstr,192);
			nextbit6 <- rshift(nextbit6,6);
			bit6 <- bor(nextbit6,bit6);
			bit8 <- valueAtWithIndex(data.map.t, byte, bit6);
			valueAtWithIndex(output.t,byte,j) <- bit8;
			j <- j + 1;
			bit6 <- band(tmpstr,63);
			bit8 <- valueAtWithIndex(data.map.t, byte, bit6);
			valueAtWithIndex(output.t, byte,j) <- bit8;
			j <- j + 1;
		fi
		i <- i + 1;
	endwhile	
endmethod


// encodeing process asciidata to usdata
box btarray bit8_bit6(addr data) for vish

	output.n <- ( asciidata.n * 6 / 8 ); 
	output.t <- freeze(output.n,byte);
	byte tmpstr;		// storing from Usdata
	byte bit6;
	byte nextbit8;
	byte bit8;
	ui64 bytecnt;
	ui64 i;
	ui64 j;
	ui64 rem;
	i<-0;
	j<-0;
	while( i < asciidata.n )
		rem <- remn(i,4);
		tmpstr <- valueAtWithIndex( asciidata.t , byte ,i );
		bit6 <- searchbit6(tmpstr);	
		if rem = 0
			bit8 <- lshift(bit6,2);
		else if rem = 1
			nextbit8 <- rshift(bit6,4);
			bit8 <- bor(nextbit8,bit8);
			valueAtWithIndex(output.t,byte,j) <- bit8;
			j <- j + 1;
			bit8 <- lshift(bit6,4);
		else if rem =2
			nextbit8 <- rshift(bit6,2);
			bit8 <- bor(nextbit8,bit8);
			valueAtWithIndex(output.t,byte,j) <- bit8;
			j <- j + 1;
			bit8 <- lshift(bit6,6);
		else
			bit8<- bor(bit8,bit6);
			valueAtWithIndex(output.t,byte,j) <- bit8;
			j <- j + 1;	
		fi
		i <- i + 1;
	endwhile	
endmethod




	
//  101010 101011 0101

// convert byte to six bits
// create table of our ascii mapping
// search function
